#!/usr/bin/env sh
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
clear
set -e
unset CDPATH

echo "   ___        _      _     ____           _            
  / _ \ _   _(_) ___| | __/ ___|___ _ __ | |_ ___ _ __ 
 | | | | | | | |/ __| |/ / |   / _ \ '_ \| __/ _ \ '__|
 | |_| | |_| | | (__|   <| |___  __/ | | | |_  __/ |   
  \__\_\\__,_|_|\___|_|\_\\____\___|_| |_|\__\___|_|   "
echo
warn() {
  echo "$*"
}

die() {
  echo
  echo "$*"
  echo
  exit 1
}

follow_links() {
  cd -P "${1%/*}"
  file="$PWD/${1##*/}"
  while [[ -L "$file" ]]; do
    # On Mac OS, readlink -f doesn't work.
    cd -P "${file%/*}"
    file="$(readlink "$file")"
    cd -P "${file%/*}"
    file="$PWD/${file##*/}"
  done
  echo "$PWD/${file##*/}"
}

# Convert a filesystem path to a format usable by Dart's URI parser.
path_uri() {
  # Reduce multiple leading slashes to a single slash.
  echo "$1" | sed -E -e "s,^/+,/,"
}

parse_env_properties_file() {
  grep "${1}" "${ENV_PROPERTIES}" | sed -E 's/^[^=]*=(.*)$/\1/'
}

parse_product_properties_file() {
  grep "${1}" "${PRODUCT_PROPERTIES}" | sed -E 's/^[^=]*=(.*)$/\1/'
}

PROG_NAME="$(path_uri "$(follow_links "${BASH_SOURCE[0]}")")"
BIN_DIR="$(
  cd "${PROG_NAME%/*}"
  pwd -P
)"
MY_ROOT="$(
  cd "${BIN_DIR}/.."
  pwd -P
)"

# TODO Extend to additional environments
ENV_PROPERTIES="${MY_ROOT}/local.properties"

PRODUCTS_AVAILABLE=$(parse_env_properties_file 'available.product.codes')

if [ -z "$1" ]; then
  die "Please supply one of these product types: $PRODUCTS_AVAILABLE"
fi

PRODUCT_CODE="$1.path"
PRODUCT_DIR=$(parse_env_properties_file "$PRODUCT_CODE")
RAW_DIR="$(dirname "$PRODUCT_DIR")"
PRODUCT_DIR="$(path_uri "$(follow_links "$RAW_DIR")")"

# Validate the path exists with the passes product code
if [ ! -d "$PRODUCT_DIR" ]; then
  die "Please supply one of the available product types and ensure the directory 
structure in the properties file is proper"
fi

# Retrieve the product major version in order to set the JDK and launch command
PRODUCT_PROPERTIES="${PRODUCT_DIR}/modules/configuration/product.properties"
PRODUCT_MAJORVERSION=$(parse_product_properties_file 'product.majorversion')
PRODUCT_PATCHVERSION=$(parse_product_properties_file 'product.patchversion')

# echo "$PRODUCT_DIR"
# echo "$PRODUCT_PROPERTIES"
# echo "$PRODUCT_MAJORVERSION"
# echo "$PRODUCT_PATCHVERSION"

# Set the JDK version based on the product
if [ "$PRODUCT_MAJORVERSION" == "10" ] && [ "$PRODUCT_PATCHVERSION" == "2" ]; then
  JAVA_PROP="java11.path"
  launcher="./gwb"
elif [ "$PRODUCT_MAJORVERSION" == "8" ] ; then
  JAVA_PROP="java17.path"
  launcher="bin/gw'${PRODUCT_CODE}'"
else
  JAVA_PROP="java18.path"
  launcher="./gwb"
fi

JAVA_DIR="$(parse_env_properties_file "$JAVA_PROP")"
SAVED="$(pwd)"
cd "$(dirname \"$JAVA_DIR\")/" >/dev/null
JAVA_DIR_FIX="$(pwd -P)"
cd "$SAVED" >/dev/null

echo "$JAVA_DIR_PROP"
echo "$JAVA_DIR_FIX"
echo "$SAVED"

JDK_HOME="$(path_uri "$(follow_links "$JAVA_DIR_FIX")")"

echo "$JDK_HOME"

export JAVA_HOME=$JDK_HOME

cd "$PRODUCT_DIR"

eval "$launcher" "$2" "$3"